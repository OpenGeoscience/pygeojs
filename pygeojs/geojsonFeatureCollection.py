import json
import re

import ipywidgets as widgets
import traitlets

@widgets.register
class geojsonFeatureCollection(widgets.CoreWidget):
    """Interim widget (model) for GeoJSON feature collections

    This is NOT autogenerated code.
    Model only, because view/rendering is handled by the map instance
    Also doesn't return feature (model) instances
    """
    _model_module = traitlets.Unicode('pygeojs').tag(sync=True)
    _model_module_version = traitlets.Unicode('^0.1.0').tag(sync=True)
    _model_name = traitlets.Unicode('geojsonFeatureCollectionModel').tag(sync=True)

    data = traitlets.Dict(default_value={}).tag(sync=True)
    layer_id = traitlets.Unicode('').tag(sync=True)

    # def __init__(self, layer, data=None, filename=None, url=None):
    def __init__(self, layer, data):
        """Initialize geojson object in geojs layer.

        :param data: can be filename (string), url (string), or direct data (dict)

        """
        super(geojsonFeatureCollection, self).__init__()
        if isinstance(data, str):
            # String input can represent either filename or url
            # Use simple regex to check for url
            match_url = re.search('^http[s]?:\/\/', data)
            if not match_url:
                # By inference, data represents a filename.
                # Load the file here (kernel code) because browser
                # security won't allow loading in the client.
                filename = data
                data = None
                try:
                    with open(filename) as f:
                        contents = f.read()
                        if contents:
                            data = json.loads(contents)
                except Exception:
                    raise

                if data is None:
                    raise RuntimeError('Unable to load file {}'.format(filename))

        self.set_trait('layer_id', layer.model_id)
        self.set_trait('data', data)
